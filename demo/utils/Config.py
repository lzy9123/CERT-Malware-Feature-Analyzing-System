#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Sun Jun 2 21:30:02 2019
@author: zhiyuli
"""

import argparse
from argparse import ArgumentParser
import copy
import json
import pandas as pd
from model_zoo import *
from plot import plot
from Pipeline import Pipeline
import warnings
warnings.simplefilter("ignore", UserWarning)
import sys
import os
os.environ["TF_CPP_MIN_LOG_LEVEL"]="3"
import logging
logging.getLogger('tensorflow').disabled = True
import tensorflow as tf
tf.compat.v1.logging.set_verbosity(tf.logging.ERROR)

class Config(object):
    '''Config

    Decode parsing parameters

    A short-cut command-line allowing engineering to
    build customized config and parse parameters into pipeline

    '''
    config_file = ""
    def parse(self, kwargs, verbose=True):
        """parse

            parse parameters into the class

            Args:
                kwargs: parsing arguments
                verbose: print option

            return
                Config class including all the parameters
        """

        for k,v in kwargs.items():
            setattr(self,k,v)

        if self.config_file != "":
            with open(self.config_file, "r") as reader:
                text = reader.read()

            json_object = json.loads(text)

            for key, value in json_object.items():
                self.__dict__[key] = value

        if verbose:
            print('User Config:')
            print('#################################')
            for k in dir(self):
                if not k.startswith('_') and k!='parse' and k!='state_dict' and not k.startswith('to'):
                    print ("{0}: {1}".format(k,getattr(self,k)))
            print('#################################')
        return self

    def state_dict(self):
        """state_dict
            load config parameters
        """
        return  {k:getattr(self,k) for k in dir(self) if not k.startswith('_') and k!='parse' and k!='state_dict' }

    def to_dict(self):
        """to_dict

            Serializes this instance to a Python dictionary

            return
                dictionary of parameters
        """
        output = copy.deepcopy(self.__dict__)
        return output

    def to_json_string(self):
        """to_json_file

            Serializes this instance to a JSON string.

            return
                JSON string
        """
        return json.dumps(self.to_dict(), indent=2, sort_keys=True) + "\n"

    def to_json_file(self, json_file_path):
        """to_json_file

            Save this instance to a json file.

            Args:
                json_file_path: the path to sav

        """
        with open(json_file_path, "w") as writer:
            writer.write(self.to_json_string())

def train(cfg = None):
    """train
        Example of customized training command-line

        example
        >>> python config.py train --train_data_path ../../train_data.csv
        --feature_column size vt_meta_size --label_column isShared-lib
        --normalized --model [LR|MLP|DecisionTree|Customized]

        Note: select one model from [LR|MLP|DecisionTree|Customized]

    """

    if cfg is None:
        # Establish argument parser
        parser = argparse.ArgumentParser(description='Example command line for model training.')

        # If option --train_data_path is provided
        # then it will be referred via args.
        parser.add_argument("--train_data_path", dest="train_data_path", required = True, help="path of training data set")
        parser.add_argument("--feature_column", dest="feature_column", nargs = "*", required = True, help="feature columns for training")
        parser.add_argument("--label_column", dest="label_column", nargs = "*", required = True, help="label columns for training")
        parser.add_argument("--model", dest="model", required = True, help="Type of model.")
        parser.add_argument("--model_save_path", dest="model_save_path", help="path to save model")

        # if set than set as true other wise false
        parser.add_argument("--normalized", dest="normalized", action='store_true', default = False, help="whether to normalized the data")
        parser.add_argument("--to_json", dest="to_json", action='store_true', default = False, help="whether to save the parameters to json file")

        # args: a namespace containing all the args
        args, unknown = parser.parse_known_args()

        # put args to config class for better usage
        cfg = Config()
        cfg.parse(vars(args), verbose=True)

    # read data
    train_data = pd.read_csv(cfg.train_data_path)

    X = train_data[cfg.feature_column]
    Y = train_data[cfg.label_column]

    # normalized
    if cfg.normalized:
        for col in X:
            X[col] = (X[col] - X[col].min()) / (X[col].max() - X[col].min())

    # get model from a string of name
    model_type = globals()[cfg.model]
    model = model_type(cfg.model)
    model.fit(X, Y)
    model.save()
    if cfg.to_json:
        cfg.to_json_file('train.json')

def load_json():
    """train
        Example of customized json command-line
        direct parse json file

        >>> python config.py --config_file train.json
    """

    # Establish argument parser
    parser = argparse.ArgumentParser(description='Example command line for model training using json.')

    parser.add_argument("--config_file", dest="config_file", required = True, help="config file for training")

    args, unknown = parser.parse_known_args()
    cfg = Config()
    cfg.parse(vars(args), verbose=True)
    func_name = args.config_file.replace(".json", "")
    globals()[func_name](cfg)
    
def test(cfg = None):
    """test
        Example of customized testing command-line

        example
        >>> python config.py test --test_data_path ../../train_data.csv
        --feature_column size vt_meta_size --normalized
        --model [LR|MLP|DecisionTree|Customized]
        --model_path [LR|MLP|DecisionTree|Customized].plt

        Note: select one model from [LR|MLP|DecisionTree|Customized]

    """

    if cfg is None:
        # Establish argument parser
        parser = argparse.ArgumentParser(description='Example command line for model testing.')

        # If option --train_data_path is provided
        # then it will be referred via args.
        parser.add_argument("--test_data_path", dest="test_data_path", required = True, help="path of testing data set")
        parser.add_argument("--feature_column", dest="feature_column", nargs = "*", required = True, help="feature columns for training")
        parser.add_argument("--model", dest="model", required = True, help="Type of model.")
        parser.add_argument("--model_load_path", dest="model_load_path", help="path to save model")

        # if set than set as true other wise false
        parser.add_argument("--normalized", dest="normalized", action='store_true', default = False, help="whether to normalized the data")
        parser.add_argument("--to_json", dest="to_json", action='store_true', default = False, help="whether to save the parameters to json file")

        # args: a namespace containing all the args
        args, unknown = parser.parse_known_args()

        # put args to config class for better usage
        cfg = Config()
        cfg.parse(vars(args), verbose=True)

    # read data
    train_data = pd.read_csv(cfg.test_data_path)

    X = train_data[cfg.feature_column]

    # normalized
    if cfg.normalized:
        for col in X:
            X[col] = (X[col] - X[col].min()) / (X[col].max() - X[col].min())

    # get model from a string of name
    model_type = globals()[cfg.model]
    model = model_type(cfg.model)
    model.load(cfg.model_load_path)
    print("Predict result: {0}".format(model.predict(X)))
    if cfg.to_json:
        cfg.to_json_file('test.json')

def analysis(cfg = None):
    """analysis
        Example of customized analysis command-line

        example
        >>> python config.py analysis --test_data_path ../../train_data.csv
        --feature_column size vt_meta_size --normalized
        --model [LR|MLP|DecisionTree|Customized]
        --model_path [LR|MLP|DecisionTree|Customized].plt
        --plot

        Note: select one model from [LR|MLP|DecisionTree|Customized]

    """

    if cfg is None:
        # Establish argument parser
        parser = argparse.ArgumentParser(description='Example command line for analysis.')

        # If option --train_data_path is provided
        # then it will be referred via args.
        parser.add_argument("--test_data_path", dest="test_data_path", required = True, help="path of testing data set")
        parser.add_argument("--feature_column", dest="feature_column", nargs = "*", required = True, help="feature columns for training")
        parser.add_argument("--model", dest="model", required = True, help="Type of model.")
        parser.add_argument("--model_load_path", dest="model_load_path", help="path to save model")

        # if argument set than set as true other wise false
        parser.add_argument("--normalized", dest="normalized", action='store_true', default = False, help="whether to normalized the data")

        # if argument set than set as true other wise false
        parser.add_argument("--plot", dest="plot", action='store_true', default = False, help="whether to plot the data")
        parser.add_argument("--to_json", dest="to_json", action='store_true', default = False, help="whether to save the parameters to json file")

        # args: a namespace containing all the args
        args, unknown = parser.parse_known_args()

        # put args to config class for better usage
        cfg = Config()
        cfg.parse(vars(args), verbose=True)

    # read data
    train_data = pd.read_csv(cfg.test_data_path)

    X = train_data[cfg.feature_column]

    step = []

    # normalized
    if cfg.normalized:
        step.append(
                lambda x: (x - np.mean(x))/ np.std(x))

    # get model from a string of name
    model_type = globals()[cfg.model]
    model = model_type(cfg.model)
    model.load(cfg.model_load_path)

    step.append(model)
    if cfg.plot:
        step.append(plot(iplot_mode = False))

    pipeline = Pipeline(step)
    pipeline(X)
    if cfg.to_json:
        cfg.to_json_file('analysis.json')




if __name__=="__main__":
    if len(sys.argv) == 1 or sys.argv[1] not in ("train", "test", "analysis", "load_json"):
        print("usage: python config.py [train|test|analysis|config] [--arg value]")
    else:
        globals()[sys.argv[1]]()








