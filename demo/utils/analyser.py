from sklearn.metrics.pairwise import cosine_similarity, euclidean_distances, manhattan_distances

class Analyser:
    """Analyser

        Here is an Analysis engine, combining all the analysis tools.
    """
    def similarity(self, X, Y = None):
        """similarity
            similarity analysis

            Args:
                X, Y: 2 array for similarity analysis, 
                    each array should be in shape of (N, M), 
                    N: sample count, M: demension count.

        """
        if isinstance(X, tuple):
            X, Y = X
        if isinstance(X, list):
            input = np.array(X)
        if isinstance(Y, list):
            input = np.array(Y)
        if type(X).__name__ == "ndarray" and len(X.shape) == 1: 
            X = X.reshape(1, -1)

        if type(Y).__name__ == "ndarray" and len(Y.shape) == 1: 
            Y = Y.reshape(1, -1)

        print("cosine_similarity: {0}\n".format(cosine_similarity(X, Y)))
        print("euclidean_distances: {0}\n".format(euclidean_distances(X, Y)))
        print("manhattan_distances: {0}\n".format(manhattan_distances(X, Y)))


    
    def __call__(self, X, Y = None):
        self.similarity(X, Y)

